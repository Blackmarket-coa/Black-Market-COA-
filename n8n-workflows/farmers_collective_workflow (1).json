{
  "name": "Farmers Collective - Main Orchestrator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "collective-main",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e63d9534-e1e5-43bd-bf14-fdfd03e2758f",
      "name": "Main API Gateway",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -656,
        208
      ],
      "webhookId": "collective-main-gateway"
    },
    {
      "parameters": {
        "jsCode": "// Main orchestrator logic - route requests to appropriate sub-workflows\nlet request = $input.all()[0].json;\n\n// Some n8n webhook payloads wrap the body\nif (request.body) {\n  request = request.body;\n}\n\n// Validate request structure\nif (!request.action || !request.role || !request.userId) {\n  throw new Error('Invalid request structure. Required: action, role, userId');\n}\n\n// Log the request\nconsole.log('Main Orchestrator - Processing:', {\n  action: request.action,\n  role: request.role,\n  userId: request.userId,\n  timestamp: new Date().toISOString()\n});\n\n// Determine target sub-workflow based on action type\nlet targetWorkflow = '';\nlet webhookPath = '';\n\nswitch(request.action) {\n  case 'ai_schedule':\n  case 'crop_optimization':\n  case 'harvest_prediction':\n    targetWorkflow = 'AI Crop Planning';\n    webhookPath = 'ai-crop-planning';\n    break;\n    \n  case 'merchant_purchase':\n  case 'fee_payment':\n  case 'bulk_order':\n    targetWorkflow = 'Merchant Fees & Trading';\n    webhookPath = 'merchant-trading';\n    break;\n    \n  case 'mutual_aid_request':\n  case 'resource_sharing':\n  case 'skill_exchange':\n    targetWorkflow = 'Mutual Aid Network';\n    webhookPath = 'mutual-aid';\n    break;\n    \n  case 'wishlist_add':\n  case 'microinvest':\n  case 'tool_funding':\n  case 'investment_return':\n    targetWorkflow = 'Blockchain Microinvestment';\n    webhookPath = 'microinvestment';\n    break;\n    \n  case 'producer_register':\n  case 'producer_update':\n  case 'production_report':\n    targetWorkflow = 'Producer Management';\n    webhookPath = 'producer-mgmt';\n    break;\n    \n  default:\n    throw new Error(`Unknown action: ${request.action}`);\n}\n\n// Prepare routing information\nreturn [{\n  ...request,\n  routing: {\n    targetWorkflow,\n    webhookPath,\n    orchestratorId: 'main-orch-' + Date.now()\n  }\n}];"
      },
      "id": "686f01d6-30cf-483e-9ade-d81001473f43",
      "name": "Request Router & Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        208
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "orchestrator_logs",
        "columns": {
          "0": "r",
          "1": "e",
          "2": "q",
          "3": "u",
          "4": "e",
          "5": "s",
          "6": "t",
          "7": "_",
          "8": "i",
          "9": "d",
          "10": ",",
          "11": " ",
          "12": "a",
          "13": "c",
          "14": "t",
          "15": "i",
          "16": "o",
          "17": "n",
          "18": ",",
          "19": " ",
          "20": "r",
          "21": "o",
          "22": "l",
          "23": "e",
          "24": ",",
          "25": " ",
          "26": "u",
          "27": "s",
          "28": "e",
          "29": "r",
          "30": "_",
          "31": "i",
          "32": "d",
          "33": ",",
          "34": " ",
          "35": "t",
          "36": "a",
          "37": "r",
          "38": "g",
          "39": "e",
          "40": "t",
          "41": "_",
          "42": "w",
          "43": "o",
          "44": "r",
          "45": "k",
          "46": "f",
          "47": "l",
          "48": "o",
          "49": "w",
          "50": ",",
          "51": " ",
          "52": "s",
          "53": "t",
          "54": "a",
          "55": "t",
          "56": "u",
          "57": "s",
          "58": ",",
          "59": " ",
          "60": "c",
          "61": "r",
          "62": "e",
          "63": "a",
          "64": "t",
          "65": "e",
          "66": "d",
          "67": "_",
          "68": "a",
          "69": "t",
          "mappingMode": "defineBelow",
          "value": {
            "action": "={{ $json.action }}",
            "role": "={{ $json.role }}",
            "user_id": "={{ $json.userId }}",
            "target_workflow": "={{ $json.routing.targetWorkflow }}",
            "id": "={{ $json.userId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "request_id",
              "displayName": "request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "action",
              "displayName": "action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "role",
              "displayName": "role",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "target_workflow",
              "displayName": "target_workflow",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "response_data",
              "displayName": "response_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "completed_at",
              "displayName": "completed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "165415b4-6429-475f-9465-6cf1d8f5bad5",
      "name": "Log to Orchestrator DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -224,
        208
      ],
      "credentials": {
        "postgres": {
          "id": "USo4ScF2tzQDAHla",
          "name": "Local Postgres DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ai-route-condition",
              "leftValue": "={{ $json.routing.webhookPath }}",
              "rightValue": "ai-crop-planning",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "040b9b68-29bc-49e6-a10e-aaacf45e22d4",
      "name": "Route to AI Planning",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "merchant-route-condition",
              "leftValue": "={{ $json.routing.webhookPath }}",
              "rightValue": "merchant-trading",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6644f9fd-f579-4f12-a312-f7543ca21e10",
      "name": "Route to Merchant Trading",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        128
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "aid-route-condition",
              "leftValue": "={{ $json.routing.webhookPath }}",
              "rightValue": "mutual-aid",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "aeba16dd-0028-45ad-892d-5fb1f52b70fd",
      "name": "Route to Mutual Aid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "invest-route-condition",
              "leftValue": "={{ $json.routing.webhookPath }}",
              "rightValue": "microinvestment",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "95812908-5733-444e-916a-5dbb1a71f2eb",
      "name": "Route to Microinvestment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        368
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "producer-route-condition",
              "leftValue": "={{ $json.routing.webhookPath }}",
              "rightValue": "producer-mgmt",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bee90f4e-1195-4c0b-adaa-2e210a2c7622",
      "name": "Route to Producer Mgmt",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        0,
        480
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.collective.local/webhook/ai-crop-planning",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "c1e9522b-8cd8-4f92-bcc8-9bbdc07489aa",
      "name": "Call AI Planning Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.collective.local/webhook/merchant-trading",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fc261508-3611-4801-945e-780bea31d27b",
      "name": "Call Merchant Trading Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        128
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.collective.local/webhook/mutual-aid",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "d739cee4-0130-4b0a-bb32-99758251cfd2",
      "name": "Call Mutual Aid Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        240
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.collective.local/webhook/microinvestment",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "341e6a08-a9b3-4ffc-ae67-e8ecd9be1946",
      "name": "Call Microinvestment Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        368
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.collective.local/webhook/producer-mgmt",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fd3e3eec-12ce-483f-8fa7-55545e34f128",
      "name": "Call Producer Mgmt Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Aggregate responses from sub-workflows\nconst responses = $input.all();\nconst mainResponse = responses[0].json;\n\n// Update orchestrator log with final status\nconst finalStatus = {\n  orchestratorId: mainResponse.routing?.orchestratorId,\n  status: 'completed',\n  subWorkflowResponse: mainResponse,\n  completedAt: new Date().toISOString()\n};\n\nconsole.log('Orchestrator - Request completed:', finalStatus);\n\nreturn [{\n  success: true,\n  message: 'Request processed successfully by orchestrator',\n  orchestratorId: finalStatus.orchestratorId,\n  subWorkflowResult: mainResponse,\n  timestamp: finalStatus.completedAt\n}];"
      },
      "id": "35253eb5-28aa-4f1d-87eb-db92899927e1",
      "name": "Aggregate Sub-workflow Responses",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        208
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": "orchestrator_logs",
        "columns": "status, completed_at, response_data",
        "options": {}
      },
      "id": "dde230ca-10ec-4f19-a077-7820d78107c4",
      "name": "Update Orchestrator Log",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        672,
        208
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "ac332526-6df7-4b91-9a63-0714fec29131",
      "name": "Return Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        880,
        208
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Main API Gateway": {
      "main": [
        [
          {
            "node": "Request Router & Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Router & Logger": {
      "main": [
        [
          {
            "node": "Log to Orchestrator DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Orchestrator DB": {
      "main": [
        [
          {
            "node": "Route to AI Planning",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route to Merchant Trading",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route to Mutual Aid",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route to Microinvestment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Route to Producer Mgmt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to AI Planning": {
      "main": [
        [
          {
            "node": "Call AI Planning Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Merchant Trading": {
      "main": [
        [
          {
            "node": "Call Merchant Trading Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Mutual Aid": {
      "main": [
        [
          {
            "node": "Call Mutual Aid Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Microinvestment": {
      "main": [
        [
          {
            "node": "Call Microinvestment Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Producer Mgmt": {
      "main": [
        [
          {
            "node": "Call Producer Mgmt Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call AI Planning Workflow": {
      "main": [
        [
          {
            "node": "Aggregate Sub-workflow Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Merchant Trading Workflow": {
      "main": [
        [
          {
            "node": "Aggregate Sub-workflow Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Mutual Aid Workflow": {
      "main": [
        [
          {
            "node": "Aggregate Sub-workflow Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Microinvestment Workflow": {
      "main": [
        [
          {
            "node": "Aggregate Sub-workflow Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Producer Mgmt Workflow": {
      "main": [
        [
          {
            "node": "Aggregate Sub-workflow Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Sub-workflow Responses": {
      "main": [
        [
          {
            "node": "Update Orchestrator Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Orchestrator Log": {
      "main": [
        [
          {
            "node": "Return Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab85aaef-fe1c-480f-8765-69f1ada67ebc",
  "meta": {
    "instanceId": "84fc6727a04903eff2d62ea90c60fdcd208ad944733fb805b44d05824ad76592"
  },
  "id": "wyeK9DBXJys29TEu",
  "tags": [
    {
      "createdAt": "2025-09-29T01:46:38.558Z",
      "updatedAt": "2025-09-29T01:46:38.558Z",
      "id": "KOpjputkMRnPSQEv",
      "name": "Main Orchestrator"
    }
  ]
}
